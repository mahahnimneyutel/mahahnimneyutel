myExt
///////////////
$extensionName = "ext5"
New-Item -ItemType Directory -Path $extensionName
Set-Location -Path $extensionName
$manifestContent = @'
{
    "manifest_version": 3,
    "name": "otegoro cmdline",
    "version": "1.0",
    "description": "Gods are at your hands",
    "permissions": ["activeTab", "scripting","storage"],
    "action":{},
      "content_scripts": [
        {
          "js": ["scripts/content.js"],
          "matches": [
            "https://*/*","http://*/*",
            "file:///*","http://172.19.197/*"
          ]
        }
      ]
}
'@
Out-File -FilePath "manifest.json" -InputObject $manifestContent -Encoding UTF8
New-Item -ItemType Directory -Path "scripts"
$contentJsContent = @'
console.log("Content script loaded.");
'@
Out-File -FilePath "scripts/content.js" -InputObject $contentJsContent -Encoding UTF8
Write-Output "Extension folder structure created successfully."
////////////////

function waitForTdsThenStartPanel(thText1, thText2) {
  const observer = new MutationObserver(() => {
    const td1 = getLastTdByThText(thText1);
    const td2 = getLastTdByThText(thText2);

    if (td1 && td2) {
      observer.disconnect();
      showStartPanel(thText1, thText2);
    }
  });
  observer.observe(document.body, { childList: true, subtree: true });
}

function showStartPanel(thText1, thText2) {
  const panel = document.createElement('div');
  panel.innerHTML = `
    <label style="margin-right: 10px;">Repeat:
      <input id="repeat-count" type="number" value="1" min="1" style="width: 60px;" />
    </label>
    <button id="start-btn">Start</button>
  `;
  Object.assign(panel.style, {
    position: 'fixed',
    bottom: '-60px',
    left: '50%',
    transform: 'translateX(-50%)',
    background: '#fff',
    border: '2px solid #000',
    padding: '10px 20px',
    boxShadow: '0 0 10px rgba(0,0,0,0.3)',
    zIndex: 2147483647,
    borderRadius: '8px',
    transition: 'bottom 0.5s ease-out',
    fontSize: '16px'
  });
  document.body.appendChild(panel);
  requestAnimationFrame(() => panel.style.bottom = '20px');

  panel.querySelector('#start-btn').addEventListener('click', () => {
    const count = parseInt(document.getElementById('repeat-count').value, 10) || 1;
    panel.remove();
    runComparisons(count, thText1, thText2);
  });
}

let executedCount = 0;
function runComparisons(count, thText1, thText2) {
  function tryNext() {
    if (executedCount >= count) return;
    compareAndAct(thText1, thText2, 2, () => {
      executedCount++;
      tryNext();
    });
  }
  tryNext();
}

function compareAndAct(thText1, thText2, waitSeconds, onSuccess) {
  const td1 = getLastTdByThText(thText1);
  const td2 = getLastTdByThText(thText2);
  if (!td1 || !td2) return;

  const text1 = td1.textContent.trim();
  const text2 = td2.textContent.trim();

  if (text1 === text2 || text2.includes(text1)) {
    checkRadioByLabelValue(text2);
    setTimeout(() => clickBeatAndTieButtons(onSuccess), waitSeconds * 1000);
  } else {
    document.addEventListener('mousemove', function handleMouse(e) {
      document.removeEventListener('mousemove', handleMouse);
      showChoiceButtons(text1, text2, e.clientX, e.clientY, onSuccess);
    });
  }
}

function getLastTdByThText(thText) {
  const th = Array.from(document.querySelectorAll('th'))
    .find(el => el.textContent.trim().toLowerCase() === thText.toLowerCase());
  return th?.parentElement?.querySelector('td:last-of-type') || null;
}

function checkRadioByLabelValue(targetText) {
  const label = Array.from(document.querySelectorAll('label')).find(l => {
    const match = l.textContent.trim().match(/^\d+:(.*)$/);
    return match && (match[1].trim() === targetText || targetText.includes(match[1].trim()));
  });

  const radio = label?.querySelector('input[type="radio"]');
  if (radio) label.click();
}

function clickBeatAndTieButtons(callback) {
  const beatBtn = Array.from(document.querySelectorAll('button'))
    .find(btn => btn.textContent.trim().toLowerCase().includes('登録'));
  if (beatBtn) beatBtn.click();

  setTimeout(() => {
    const tieBtn = Array.from(document.querySelectorAll('button'))
      .find(btn => btn.textContent.trim().toLowerCase().includes('次へ'));
    if (tieBtn) tieBtn.click();
    if (typeof callback === 'function') callback();
  }, 1500);
}

function showChoiceButtons(text1, text2, mouseX, mouseY, callback) {
  const btn1 = document.createElement('button');
  const btn2 = document.createElement('button');

  btn1.textContent = `← ${text1}`;
  btn2.textContent = `${text2} →`;

  const baseStyle = `
    position: fixed;
    z-index: 2147483647;
    padding: 12px 18px;
    font-size: 16px;
    font-weight: bold;
    border: 2px solid #000;
    background-color: white;
    color: black;
    box-shadow: 0 0 10px rgba(0,0,0,0.5);
    border-radius: 6px;
    cursor: pointer;
  `;

  btn1.style.cssText = baseStyle + `left: ${mouseX - 160}px; top: ${mouseY - 20}px;`;
  btn2.style.cssText = baseStyle + `left: ${mouseX + 60}px; top: ${mouseY - 20}px;`;

  document.body.appendChild(btn1);
  document.body.appendChild(btn2);

  const cleanup = () => {
    btn1.remove();
    btn2.remove();
  };

  btn1.addEventListener('click', () => {
    checkRadioByLabelValue(text1);
    cleanup();
    clickBeatAndTieButtons(callback);
  });

  btn2.addEventListener('click', () => {
    checkRadioByLabelValue(text2);
    cleanup();
    clickBeatAndTieButtons(callback);
  });
}

waitForTdsThenStartPanel('一次判定結果', '二次判定結果');
